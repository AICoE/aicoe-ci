apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gather-metrics-check-inputs
  labels:
    app: aicoe-ci
spec:
  params:
    - name: pr_number
      description: Pull request ID.
    - name: pr_repo
      description: The git repository pr was raised to.
    - name: event_action
      description: Action of Issue.
  resources:
    inputs:
      - name: s2i-thoth
        type: image
      - name: repo
        type: git
  results:
    - name: check_inputs_failed
      description: Check inputs for running pipeline to gather metrics

  steps:
    - name: check-inputs
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      env:
        - name: PIPELINE_PR_REPO
          value: $(params.pr_repo)
        - name: PIPELINE_PR_NUMBER
          value: $(params.pr_number)
        - name: PIPELINE_EVENT_ACTION
          value: $(params.event_action)
      script: |
        #!/usr/bin/env python3
        import yaml
        import subprocess
        import sys
        import os
        from pathlib import Path

        path_features = Path.cwd().joinpath("features")

        event_action = os.environ["PIPELINE_EVENT_ACTION"]

        with open(".aicoe-ci.yaml", "r") as ci_stream:
          ci_conf = yaml.safe_load(ci_stream)

        print(f".aicoe.yaml is: {ci_conf}")
        ci_missing_inputs = False

        overlays_dir = ci_conf.get("overlays_dir", "overlays")

        if not overlays_dir:
          print("No overlays in .aicoe.yaml")

          if not ci_conf.get("deploy"):
            ci_missing_inputs = True
        else:
          overlay_deploy_present = False

          for overlay_env in ci_conf["overlays"]:
            if overlay_env.get("deploy", []):
              overlay_deploy_present = True
              break

          if not overlay_deploy_present:
            ci_missing_inputs = True

        check_inputs_failed = 0

        # Check if features folder exists for behave test

        if not path_features.exists():
          print(f"features folder with behave tests is not in git repo.")
          check_inputs_failed = 1

        # Check if .aicoe.yaml contains deploy key
        if ci_missing_inputs:
          print(f".aicoe.yaml miss inputs for deployment.")
          check_inputs_failed = 1

        # Check if pr has been closed
        if event_action == "closed":
          print(f"Event action -> closed, pipeline will be deleted.")
          check_inputs_failed = 1

        try:
            command = f"echo -n {str(check_inputs_failed)} > $(results.check_inputs_failed.path)"
            process_output = subprocess.run(
                command,
                shell=True,
                capture_output=True,
            )

        except Exception as pipeline_delete:
            print("Error storing variable: %r", pipeline_delete)
            sys.exit(1)

    - name: oc-clean-all
      image: quay.io/openshift/origin-cli:latest
      script: |
        PIPELINE_CHECK=$(<$(results.check_inputs_failed.path))
        if [ "$PIPELINE_CHECK" == "1" ]; then
          oc delete pipelinerun  --selector component=$(params.pr_repo)-pr-$(params.pr_number)
        fi
        oc delete dc  -l component=$(params.pr_repo)-pr-$(params.pr_number)
        oc delete route  -l component=$(params.pr_repo)-pr-$(params.pr_number)
        oc delete service  -l component=$(params.pr_repo)-pr-$(params.pr_number)
