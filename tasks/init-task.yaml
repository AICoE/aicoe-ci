apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: init-task
  labels:
    app: aicoe-ci
spec:
  params:
    - name: event_action
      description: Action of Issue.
    - name: pr_number
      description: Pull request ID.
    - name: pr_repo
      description: The git repository pr was raised to.
    - name: repo_url
      description: The git repository url.
    - name: pr_comment
      description: comment on the pull request.
    - name: pr_comment_author
      description: author of the comment on the pull request.
    - name: pr_comment_author_association
      description: comment author's association.
  resources:
    inputs:
      - name: pr
        type: pullRequest
      - name: s2i-thoth
        type: image
      - name: repo
        type: git
  results:
    - name: overlay_name
    - name: overlay_contextpath

  steps:
    - name: init-ops
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      env:
        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: auth-secret
              key: token
      script: |
        #!/usr/bin/env python3
        import json
        import yaml
        import os
        import http.client
        import re

        def write_to_file(path, item, content):
            output = open(path, "w+")
            output.write(str(item.get(content)))
            output.close()

        def post_comment(context):
            with open("/workspace/pr/pr.json") as f:
                PR_INFO = json.load(f)
            status_url = "/repos/{}/issues/{}/comments".format(
                PR_INFO["Base"]["Repo"]["FullName"], PR_INFO["Number"]
            )
            data = {"body": context}

            conn = http.client.HTTPSConnection("api.github.com")
            r = conn.request(
                "POST",
                status_url,
                body=json.dumps(data),
                headers={
                    "User-Agent": "aicoe-ci",
                    "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
                },
            )
            resp = conn.getresponse()
            if not str(resp.status).startswith("2"):
                print("Error: %d" % (resp.status))
                print(resp.read())
            else:
                print("GitHub comment has been added.")


        received_comment = """$(params.pr_comment)"""
        received_comment = received_comment.strip().lower()
        author = "$(params.pr_comment_author)"
        author_association = "$(params.pr_comment_author_association)"
        return_comment = ""
        open("/tekton/results/overlay_name", "w+").close()
        open("/tekton/results/overlay_contextpath", "w+").close()
        if "/deploy" == received_comment:
            if os.path.isfile("./OWNERS"):
              with open("./OWNERS", "r") as owners_file:
                  owners = yaml.safe_load(owners_file)
            else:
              owners = []
            if not (author_association == "OWNER" or author_association == "MEMBER" or author in owners["approvers"]):
                return_comment = f"Hi @{author},\n you are not authorised to run `/deploy` command.\n Please contact the OWNERS."
        if re.match("/deploy [a-z,A-Z][a-z,A-Z,\-,0-9]*", received_comment):
            var_overlay_name = received_comment[8:]
            output_file = open("/tekton/results/overlay_name", "w+")
            output_file.write(var_overlay_name)
            output_file.close()
            overlay_found = "false"
            for root, dirs, files in os.walk("/workspace/repo/manifests/"):
                for name in dirs:
                    if name == var_overlay_name:
                        output_file = open("/tekton/results/overlay_contextpath", "w+")
                        json.dump(root + "/" + var_overlay_name, output_file)
                        output_file.close()
                        overlay_found = "true"
            if var_overlay_name != "" and overlay_found == "false":
                if "return_comment" in locals():
                    return_comment += f"\nAdditionally, no overlay for name {var_overlay_name} found."
                else:
                    return_comment = f"No overlay for name {var_overlay_name} found."
        if return_comment:
            post_comment(return_comment)

    - name: check-results
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      script: |
        ls -la /tekton/results/

    - name: oc-create-image
      image: quay.io/openshift/origin-cli:latest
      script: |
        if [ "$(params.event_action)" == "closed" ]; then
          oc delete pipelinerun  --selector component=$(params.pr_repo)-pr-$(params.pr_number)
        fi
