apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: init-task
  labels:
    app: thoth-ci
spec:
  params:
    - name: event_action
      description: Action of Issue.
    - name: pr_number
      description: Pull request ID.
    - name: pr_repo
      description: The git repository pr was raised to.
    - name: pr_merged
      description: Details about pull request merge.
    - name: pr_comment
      description: comment on the pull request.
    - name: pr_comment_author
      description: author of the comment on the pull request.
    - name: pr_comment_author_association
      description: comment author's association.
    - name: pipelinerun_name
      description: pipelinerun associated.
  resources:
    inputs:
      - name: pr
        type: pullRequest
      - name: ubi
        type: image
      - name: s2i-thoth
        type: image
      - name: repo
        type: git
    outputs:
      - name: pr
        type: pullRequest
  steps:
    - name: init-ops
      image: $(resources.inputs.ubi.url)
      workingDir: /workspace/repo
      resources:
        limits:
          memory: "500Mi"
          cpu: "1"
        requests:
          memory: "500Mi"
          cpu: "1"
      securityContext:
        privileged: true
      script: |
        set -e
        cp -r /workspace/pr/ /workspace/output/
        if [ "$(params.event_action)" == "opened" ]; then
          echo "Thanks for Opening the Pull Request.
          I can assist you with following commands:
            /retest : To Rerun the test checks.
            /deploy : To deploy the commit in test environment.
          " > /workspace/output/pr/comments/open
        elif [ "$(params.event_action)" == "closed" -a "$(params.pr_merged)" == "true" ]; then
          echo "Successfully Merged.
          Thanks for the contribution." > /workspace/output/pr/comments/close
        elif [ "$(params.event_action)" == "closed" ]; then
          echo "You can Re-Open the Pull Request.
          Thanks for the contribution." > /workspace/output/pr/comments/close
        fi

        author_association="$(params.pr_comment_author_association)"
        msg=""
        case $(params.pr_comment) in
          "/retest" )
            if [ "$author_association" == "NONE" -o "$author_association" == "FIRST_TIMER" ]; then
              msg="Hi @$(params.pr_comment_author)
              Unauthorised to run /retest command."
            fi;;
          "/deploy" )
            if ! { [ "$author_association" != "OWNER" -o "$author_association" != "MEMBER" ]; }; then
              msg="Hi @$(params.pr_comment_author)
              Unauthorised to run /deploy command.
              Need to be either an OWNER or MEMBER."
            fi;;
          "/approve" )
            if [ "$author_association" != "OWNER" ]; then
              msg="Hi @$(params.pr_comment_author)
              Unauthorised to run /approve command.
              Need to be an OWNER."
            fi;;
          /* )
            msg="Hi @$(params.pr_comment_author)
            you may command me for:
              /retest : To Rerun the test checks.
              /deploy : To deploy the commit in test environment."
            ;;
          * )
            ;;
        esac
        if [ ! -z "$msg" ]; then
          echo "$msg" > /workspace/output/pr/comments/comment
        fi

    - name: status-setup
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        set -e
        git fetch origin pull/$(params.pr_number)/head:workbranch
        git checkout workbranch
        if [[ -f .coafile ]]; then
          cat <<EOF > /workspace/output/pr/status/coala.json
          {
            "State": "pending",
            "Target": "http://tekton-dashboard-tekton-pipelines.apps.thoth01.lab.upshift.rdu2.redhat.com/#/namespaces/thoth-ci/pipelineruns/$(params.pipelinerun_name)",
            "Desc": "The coala test pending.",
            "Label": "thoth-ci/coala-check"
          }
        EOF
        fi
        if [[ -f setup.py ]]; then
          cat <<EOF > /workspace/output/pr/status/pytest.json
          {
            "State": "pending",
            "Target": "http://tekton-dashboard-tekton-pipelines.apps.thoth01.lab.upshift.rdu2.redhat.com/#/namespaces/thoth-ci/pipelineruns/$(params.pipelinerun_name)",
            "Desc": "The pytest test pending.",
            "Label": "thoth-ci/pytest-check"
          }
        EOF
        fi
        if [[ -f .pre-commit-config.yaml ]]; then
          cat <<EOF > /workspace/output/pr/status/pre-commit.json
          {
            "State": "pending",
            "Target": "http://tekton-dashboard-tekton-pipelines.apps.thoth01.lab.upshift.rdu2.redhat.com/#/namespaces/thoth-ci/pipelineruns/$(params.pipelinerun_name)",
            "Desc": "The pre-commit test pending.",
            "Label": "thoth-ci/pre-commit-check"
          }
        EOF
        fi
        cat <<EOF > /workspace/output/pr/status/build.json
        {
          "State": "pending",
          "Target": "http://tekton-dashboard-tekton-pipelines.apps.thoth01.lab.upshift.rdu2.redhat.com/#/namespaces/thoth-ci/pipelineruns/$(params.pipelinerun_name)",
          "Desc": "The image build test pending.",
          "Label": "thoth-ci/build-check"
        }
        EOF

    - name: oc-create-image
      image: quay.io/openshift/origin-cli:latest
      script: |
        if [ "$(params.event_action)" == "closed" -o "$(params.pr_merged)" == "true" ]; then
          oc delete pipelinerun  --selector component=pipelinerun-$(params.pr_repo)-pr-$(params.pr_number)
        fi
