apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tag-deploy
spec:
  params:
    # tag params
    - name: git_ref
      description: Git reference value.
    - name: repo_name
      description: The git repository title.
    - name: default_branch
      default: master
      description: Default branch used by the repo.
    - name: registry
      description: Container image registry.
      default: "quay.io"
    - name: registry_org
      description: Name of the registry organization.
      default: "thoth-station"
    - name: registry_project
      description: Name of the project repository.
      default: ""
    - name: deploy_project_org
      description: Deployment configuration repository's organization.
      default: "thoth-station"
    - name: deploy_project_name
      description: Deployment configuration repository.
      default: "thoth-application"
    - name: deploy_image_name
      description: Deployment imagestream name to be used by the application.
      default: ""
    - name: init_overlay_contextpath
      type: string
      description: imagestreamtag yaml which is to be updated, coming from the init-task.
      default: ""
    - name: overlay_contextpath
      type: string
      description: imagestreamtag yaml which is to be updated, coming from the pr-config task.
      default: ""
    - name: overlay_name
      type: string
      description: the overlay name to deploy (if one exists).
      default: ""
    - name: default-action
      type: string
      description: "wether to open a PR or push directly to upstream. Options: [pr, commit]"

  resources:
    inputs:
      - name: s2i-thoth
        type: image

  steps:
  - name: git-clone-config-repo
    image: $(resources.inputs.s2i-thoth.url)
    securityContext:
      privileged: true
    script: |

      export GIT_SSH_COMMAND='ssh -i /tekton/home/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
      cd /workspace/configrepo
      if [[ -z "$(params.deploy_project_org)" ]] && [[ -z "$(params.deploy_project_name)" ]]; then
        echo "git@github.com:"$(params.registry_org)"/"$(params.registry_project)" /workspace/configrepo"
        git clone "git@github.com:"$(params.registry_org)"/"$(params.registry_project)".git"
      else
        echo "git@github.com:"$(params.deploy_project_org)"/"$(params.deploy_project_name)" /workspace/configrepo"
        git clone "https://github.com/"$(params.deploy_project_org)"/"$(params.deploy_project_name)""
      fi
    volumeMounts:
      - name: ssh-config
        mountPath: /tekton/home/.ssh

  - name: patch-imagetag
    image: $(resources.inputs.s2i-thoth.url)
    workingDir: /workspace/configrepo
    script: |
      #!/opt/app-root/bin/python

      import yaml
      import os
      from os import listdir

      repo_name = os.listdir("/workspace/configrepo")[0]

      registry_repo = "$(params.registry_project)" if "$(params.registry_project)" else "$(params.repo_name)"

      if "$(params.init_overlay_contextpath)" == "":
          if "$(params.overlay_contextpath)" == "" and "$(params.overlay_name)" != "":
              contextpath = "$(params.repo_name)/manifests/overlays/$(params.overlay_name)/imagestreamtag.yaml"
          elif "$(params.overlay_contextpath)" == "":
              contextpath = "$(params.repo_name)/overlays/test/imagestreamtag.yaml"
          else:
              contextpath = "$(params.overlay_contextpath)"
      else:
          contextpath = "$(params.init_overlay_contextpath)/imagestreamtag.yaml"
          registry_repo = "$(params.overlay_name)"

      image = f"$(params.registry)/$(params.registry_org)/{registry_repo}:$(params.git_ref)"


      with open("{}/{}".format(repo_name, contextpath), "r") as stream:
          conf = list(yaml.safe_load_all(stream))

      for doc in conf:
          if doc["kind"] == "ImageStream":
              if doc["metadata"]["name"] == "$(params.deploy_image_name)":
                  for _i, tags in enumerate(doc["spec"]["tags"]):
                      doc["spec"]["tags"][_i]["from"]["name"] = image
          if doc["kind"] == "Job":
              if "$(params.deploy_image_name)" in doc["metadata"]["name"]:
                  doc["metadata"]["name"] = "$(params.deploy_image_name)-$(params.git_ref)"
                  for _i, tags in enumerate(doc["spec"]["template"]["spec"]["containers"]):
                      doc["spec"]["template"]["spec"]["containers"][_i]["image"] = image

      with open("{}/{}".format(repo_name, contextpath), "w") as output_yaml:
          yaml.dump_all(conf, output_yaml, default_flow_style=False)
      print("Image update completed")

  - name: git-push
    image: $(resources.inputs.s2i-thoth.url)
    securityContext:
      privileged: true
    workingDir: /workspace/configrepo
    env:
      - name: GITHUB_USERNAME
        valueFrom:
          secretKeyRef:
            name: auth-secret
            key: user-name
      - name: GITHUB_EMAIL
        valueFrom:
          secretKeyRef:
            name: auth-secret
            key: user-email
    script: |
      repo_name=$(ls ./)
      cd $repo_name
      git config --local user.email "$GITHUB_EMAIL"
      git config --local user.name "$GITHUB_USERNAME"
      git status
      git remote -v
      if [[ "$(params.default-action)" == "pr" ]]; then
        git checkout -b tag_deploy_$(params.git_ref)
        git add .
        git commit -m ":ship: Deploy the Tag $(params.git_ref) for "$(params.repo_name)""
        export GIT_SSH_COMMAND='ssh -i /tekton/home/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
        git push "git@github.com/"$(params.deploy_project_org)"/"$(params.deploy_project_name)"" -f
        request="https://api.github.com/"$(params.deploy_project_org)"/"$(params.deploy_project_name)"/compare/master...tag_deploy_$(params.git_ref)?title=Updating_imagestream_for_+$(params.repo_name)&body=Automated_pull_by_sesheta_deploying_tag_$(params.git_ref)"
        echo $request
        curl -X POST $request
      elif [[ $(params.default-action) ==  "commit" ]]; then
        git add .
        git commit -m ":ship: Deploy the Tag $(params.git_ref) for $(params.repo_name)"
        export GIT_SSH_COMMAND='ssh -i /tekton/home/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
        git push --set-upstream origin "$(params.default_branch)"
      fi
    volumeMounts:
      - name: ssh-config
        mountPath: /tekton/home/.ssh

  volumes:
    - name: ssh-config
      secret:
        secretName: auth-secret
        items:
          - key: ssh-privatekey
            mode: 0600
            path: id_rsa
