apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tag-deploy
spec:
  params:
    # tag params
    - name: git_ref
      description: Git reference value.
    - name: repo_name
      description: The git repository title.
    - name: registry
      description: Container image registry.
      default: "quay.io"
    - name: registry_org
      description: Name of the registry organization.
      default: "thoth-station"
    - name: registry_project
      description: Name of the project repository.
      default: ""
    - name: deploy_project_org
      description: Deployment configuration repository's organization.
      default: "thoth-station"
    - name: deploy_project_name
      description: Deployment configuration repository.
      default: "thoth-application"
    - name: deploy_image_name
      description: Deployment imagestream name to be used by the application.
      default: ""
    - name: overlay_contextpath
      type: string
      description: imagestreamtag yaml which is to be updated.
      default: ""
  resources:
    inputs:
      - name: s2i-thoth
        type: image

  steps:
  - name: git-clone-config-repo
    image: $(resources.inputs.s2i-thoth.url)
    securityContext:
      privileged: true
    script: |
      export GIT_SSH_COMMAND='ssh -i /tekton/home/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
      git clone git@github.com:$(params.deploy_project_org)/$(params.deploy_project_name) /workspace/configrepo
    volumeMounts:
      - name: ssh-config
        mountPath: /tekton/home/.ssh

  - name: patch-imagetag
    image: $(resources.inputs.s2i-thoth.url)
    workingDir: /workspace/configrepo
    script: |
      #!/usr/bin/env python3
      import yaml

      registry_repo = "$(params.registry_project)" if "$(params.registry_project)" else "$(params.repo_name)"
      contextpath = (
          "$(params.overlay_contextpath)"
          if "$(params.overlay_contextpath)"
          else "$(params.repo_name)/overlays/test/imagestreamtag.yaml"
      )
      image = f"$(params.registry)/$(params.registry_org)/{registry_repo}:$(params.git_ref)"

      with open(contextpath, "r") as stream:
          conf = list(yaml.safe_load_all(stream))

      for doc in conf:
          if doc["kind"] == "ImageStream":
              if doc["metadata"]["name"] == "$(params.deploy_image_name)":
                  for _i, tags in enumerate(doc["spec"]["tags"]):
                      doc["spec"]["tags"][_i]["from"]["name"] = image
          if doc["kind"] == "Job":
              if doc["metadata"]["name"] == "$(params.deploy_image_name)":
                  for _i, tags in enumerate(doc["spec"]["template"]["spec"]["containers"]):
                      doc["spec"]["template"]["spec"]["containers"][_i]["image"] = image

      with open(contextpath, "w") as output_yaml:
          yaml.dump_all(conf, output_yaml, default_flow_style=False)
      print("Image update completed")

  - name: git-push
    image: $(resources.inputs.s2i-thoth.url)
    securityContext:
      privileged: true
    workingDir: /workspace/configrepo
    env:
      - name: GITHUB_USERNAME
        valueFrom:
          secretKeyRef:
            name: auth-secret
            key: user-name
      - name: GITHUB_EMAIL
        valueFrom:
          secretKeyRef:
            name: auth-secret
            key: user-email
    script: |
      git config --local user.email "$GITHUB_EMAIL"
      git config --local user.name "$GITHUB_USERNAME"
      git status
      git add .
      git commit -m ":ship: Deploy the Tag $(params.git_ref) for $(params.repo_name)"
      export GIT_SSH_COMMAND='ssh -i /tekton/home/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
      git push --set-upstream origin master
    volumeMounts:
      - name: ssh-config
        mountPath: /tekton/home/.ssh

  volumes:
    - name: ssh-config
      secret:
        secretName: auth-secret
        items:
          - key: ssh-privatekey
            mode: 0600
            path: id_rsa
