apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pr-s2i-build
spec:
  params:
    # buildah params
    - name: PATH_CONTEXT
      default: .
      description: The location of the path to run s2i from.
    - name: TLSVERIFY
      default: "false"
      description:
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
    - name: LOGLEVEL
      description: Log level when running the S2I binary
      default: "0"
    # s2i thoth params
    - name: THOTH_ADVISE
      description: Advise the recommended stack by Thoth.
      default: "0"
    - name: THOTH_ERROR_FALLBACK
      description: Fallback to the lock file present in the repository if the submitted Thoth analysis fails.
      default: "1"
    - name: THOTH_DRY_RUN
      description: Submit stack to Thoth, but do not use the recommended one.
      default: "0"
    - name: "THAMOS_DEBUG"
      description: "Thamos enable debug mode."
      default: "0"
    - name: "THAMOS_VERBOSE"
      description: Run thamos in verbose mode.
      default: "1"
    - name: THOTH_PROVENANCE_CHECK
      description: Provenance check is verify the stack.
      default: "1"
    - name: THAMOS_NO_PROGRESSBAR
      description: Disable progressbar for thamos.
      default: "1"
    # pull request params
    - name: pr_number
      description: Pull Request number.
    - name: pr_repo
      description: Pull Request repository.
  resources:
    inputs:
      - name: s2i-thoth
        type: image
      - name: image-base
        type: image
      - name: pr
        type: pullRequest
      - name: repo
        type: git
    outputs:
      - name: pr
        type: pullRequest

  steps:
    - name: oc-create-image
      image: quay.io/openshift/origin-cli:latest
      script: |
        oc get imagestream $(params.pr_repo) || oc create imagestream $(params.pr_repo) --lookup-local=true

    - name: git-init-op
      resources:
        limits:
          memory: "500Mi"
          cpu: "1"
        requests:
          memory: "500Mi"
          cpu: "1"
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
          cp -r /workspace/pr/ /workspace/output/
          git fetch origin pull/$(params.pr_number)/head:workbranch
          git checkout workbranch

    - name: generate
      command:
        - /usr/local/bin/s2i
        - --loglevel=$(params.LOGLEVEL)
        - build
        - $(params.PATH_CONTEXT)
        - $(resources.inputs.s2i-thoth.url)
        - --as-dockerfile
        - /gen-source/Dockerfile.gen
      image: quay.io/openshift-pipeline/s2i:nightly
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingDir: /workspace/repo

    - name: build
      image: quay.io/buildah/stable
      command:
        - buildah
        - bud
        - --build-arg
        - THOTH_ADVISE=$(params.THOTH_ADVISE)
        - --build-arg
        - THOTH_ERROR_FALLBACK=$(params.THOTH_ERROR_FALLBACK)
        - --build-arg
        - THOTH_DRY_RUN=$(params.THOTH_DRY_RUN)
        - --build-arg
        - THAMOS_DEBUG=$(params.THAMOS_DEBUG)
        - --build-arg
        - THAMOS_VERBOSE=$(params.THAMOS_VERBOSE)
        - --build-arg
        - THOTH_PROVENANCE_CHECK=$(params.THOTH_PROVENANCE_CHECK)
        - --tls-verify=$(params.TLSVERIFY)
        - --layers
        - -f
        - /gen-source/Dockerfile.gen
        - -t
        - $(params.pr_repo)-$(params.pr_number)
        - .
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source

    - name: push
      image: quay.io/buildah/stable
      command:
        - buildah
        - push
        - --tls-verify=$(params.TLSVERIFY)
        - $(params.pr_repo)-$(params.pr_number)
        - docker://$(resources.inputs.image-base.url)/$(params.pr_repo):$(params.pr_number)
      securityContext:
        privileged: true
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers

    - name: run-build
      image: quay.io/openshift/origin-cli:latest
      script: |
        set +e
        out=$(buildah images $(params.pr_repo)-$(params.pr_number):latest 2>&1)
        set -e
        exit_code=$?
        if [[ $exit_code -ne 0 ]]; then
          code="failure"
          description="The image build test failed!"
        else
          code="success"
          description="The image build test succeeded!"
        fi
        cat <<EOF > /workspace/output/pr/status/build.json
        {
          "State": "$code",
          "Target": "http://tekton-dashboard-tekton-pipelines.apps.thoth01.lab.upshift.rdu2.redhat.com/",
          "Desc": "$description",
          "Label": "thoth-ci/build-check"
        }
        EOF


  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
