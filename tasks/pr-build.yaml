apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pr-s2i-build
spec:
  params:
    # pull request params
    - name: pr_number
      description: Pull Request number.
    - name: pr_repo
      description: Pull Request repository.
    - name: pipelinerun_name
      description: pipelinerun associated.
    - name: base_image
      description: Base image to be used.
      default: "quay.io/thoth-station/s2i-thoth-ubi8-py36:latest"
    - name: build_stratergy
      description: stratergy with which image is to build.
      default: ""
    - name: dockerfile_path
      description: dockerfile path to be used for builds.
      default: ""
    - name: build_source_script
      description: Specify a URL for the assemble, assemble-runtime and run scripts
      default: ""

    # buildah params
    - name: PATH_CONTEXT
      default: .
      description: The location of the path to run s2i from.
    - name: TLSVERIFY
      default: "false"
      description:
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
    - name: LOGLEVEL
      description: Log level when running the S2I binary
      default: "0"
    # s2i thoth params
    - name: ENABLE_PIPENV
      description: Set this variable to use Pipenv.
      default: "1"
    - name: UPGRADE_PIP_TO_LATEST
      description: Set this variable to have the 'pip' program and related python packages be upgraded.
      default: "1"
    - name: WEB_CONCURRENCY
      description: Set this to change the default setting for the number of workers.
      default: "1"
    - name: THOTH_ADVISE
      description: Advise the recommended stack by Thoth.
      default: "0"
    - name: THOTH_ERROR_FALLBACK
      description: Fallback to the lock file present in the repository if the submitted Thoth analysis fails.
      default: "1"
    - name: THOTH_DRY_RUN
      description: Submit stack to Thoth, but do not use the recommended one.
      default: "1"
    - name: "THAMOS_DEBUG"
      description: "Thamos enable debug mode."
      default: "0"
    - name: "THAMOS_VERBOSE"
      description: Run thamos in verbose mode.
      default: "1"
    - name: THOTH_PROVENANCE_CHECK
      description: Provenance check is verify the stack.
      default: "0"
    - name: THAMOS_NO_PROGRESSBAR
      description: Disable progressbar for thamos.
      default: "1"
  resources:
    inputs:
      - name: s2i-thoth
        type: image
      - name: pr
        type: pullRequest
      - name: repo
        type: git

  steps:
    - name: git-init-op
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        git fetch origin pull/$(params.pr_number)/head:workbranch
        git checkout workbranch

    - name: generate
      image: quay.io/openshift-pipeline/s2i:nightly
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        if [ -z "$(params.build_stratergy)" ]; then
          if [ -f Dockerfile ]; then
            cp -rf . /gen-source/
            mv /gen-source/Dockerfile /gen-source/Containerfile
          elif [ -f Containerfile ]; then
            cp -rf . /gen-source/
          else
            /usr/local/bin/s2i build \
            $(params.PATH_CONTEXT) \
            $(params.base_image) \
            --env UPGRADE_PIP_TO_LATEST=$(params.UPGRADE_PIP_TO_LATEST) \
            --env WEB_CONCURRENCY=$(params.WEB_CONCURRENCY) \
            --env THOTH_ADVISE=$(params.THOTH_ADVISE) \
            --env THOTH_ERROR_FALLBACK=$(params.THOTH_ERROR_FALLBACK) \
            --env THOTH_DRY_RUN=$(params.THOTH_DRY_RUN) \
            --env THAMOS_DEBUG=$(params.THAMOS_DEBUG) \
            --env THAMOS_VERBOSE=$(params.THAMOS_VERBOSE) \
            --env THOTH_PROVENANCE_CHECK=$(params.THOTH_PROVENANCE_CHECK) \
            --loglevel=$(params.LOGLEVEL) \
            --as-dockerfile /gen-source/Containerfile
          fi
        else
          if [ "$(params.build_stratergy)" == "Dockerfile" ]; then
            if [ -z "$(params.dockerfile_path)" ]; then
              cp -rf . /gen-source/
              mv /gen-source/Dockerfile /gen-source/Containerfile
            else
              cp -rf . /gen-source/
              mv /gen-source/"$(params.dockerfile_path)" /gen-source/Containerfile
            fi
          elif [ "$(params.build_stratergy)" == "Containerfile" ]; then
            cp -rf . /gen-source/
          else
            if [ -z "$(params.build_source_script)" ]; then
              /usr/local/bin/s2i build \
              $(params.PATH_CONTEXT) \
              $(params.base_image) \
              --env UPGRADE_PIP_TO_LATEST=$(params.UPGRADE_PIP_TO_LATEST) \
              --env WEB_CONCURRENCY=$(params.WEB_CONCURRENCY) \
              --env THOTH_ADVISE=$(params.THOTH_ADVISE) \
              --env THOTH_ERROR_FALLBACK=$(params.THOTH_ERROR_FALLBACK) \
              --env THOTH_DRY_RUN=$(params.THOTH_DRY_RUN) \
              --env THAMOS_DEBUG=$(params.THAMOS_DEBUG) \
              --env THAMOS_VERBOSE=$(params.THAMOS_VERBOSE) \
              --env THOTH_PROVENANCE_CHECK=$(params.THOTH_PROVENANCE_CHECK) \
              --env GIT_REPO_NAME=$(params.pr_repo) \
              --loglevel=$(params.LOGLEVEL) \
              --as-dockerfile /gen-source/Containerfile
            else
              /usr/local/bin/s2i build \
              $(params.PATH_CONTEXT) \
              $(params.base_image) \
              --scripts-url=$(params.build_source_script) \
              --assemble-user=root \
              --assemble-runtime-user=root \
              --loglevel=$(params.LOGLEVEL) \
              --env GIT_REPO_NAME=$(params.pr_repo) \
              --as-dockerfile /gen-source/Containerfile
            fi
          fi
        fi
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source

    - name: run-build
      image: quay.io/buildah/stable
      workingDir: /gen-source
      securityContext:
        privileged: true
      resources:
        limits:
          memory: "8Gi"
          cpu: "2"
        requests:
          memory: "2Gi"
          cpu: "2"
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      script: |
        set +e
        out=$(buildah bud --tls-verify=$(params.TLSVERIFY) --layers -f /gen-source/Containerfile -t $(params.pr_repo)-$(params.pr_number) . 2>&1)
        exit_code=$?
        set -e
        if [[ $exit_code -ne 0 ]]; then
          state="failure"
          desc="The image build test failed!"
        else
          state="success"
          desc="The image build test succeeded!"
        fi
        cat <<EOF > /workspace/repo/pr-status.json
        {
          "state": "$state",
          "desc": "$desc"
        }
        EOF

    - name: pr-updates
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      env:
        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: auth-secret
              key: token
      script: |
        #!/usr/libexec/platform-python
        import json
        import os
        import http.client

        def post_status(state, description):
            with open("/workspace/pr/pr.json") as f:
                PR_INFO = json.load(f)
            status_url = "/repos/{}/statuses/{}".format(PR_INFO["Base"]["Repo"]["FullName"], PR_INFO["Head"]["Sha"])
            data = {
                "state": state,
                "target_url": "https://tekton.operate-first.cloud/#/namespaces/opf-ci-pipelines/pipelineruns/$(params.pipelinerun_name)",
                "description": description,
                "context": "aicoe-ci/build-check"
            }

            conn = http.client.HTTPSConnection("api.github.com")
            r = conn.request(
                "POST",
                status_url,
                body=json.dumps(data),
                headers={
                    "User-Agent": "aicoe-ci",
                    "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
                })
            resp = conn.getresponse()
            if not str(resp.status).startswith("2"):
                print("Error: %d" % (resp.status))
                print(resp.read())
            else:
                print(resp.read())

        if os.path.isfile('pr-status.json'):
          with open('pr-status.json') as json_data:
            status_state=json.load(json_data)
            post_status(status_state['state'], status_state['desc'])

  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
