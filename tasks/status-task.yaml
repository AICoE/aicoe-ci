apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: status-task
  labels:
    app: aicoe-ci
spec:
  params:
    - name: pr_number
      description: Pull request ID.
    - name: pipelinerun_name
      description: pipelinerun associated.
    - name: repo_full_name
      description: The git repository full name.
  resources:
    inputs:
      - name: pr
        type: pullRequest
      - name: s2i-thoth
        type: image
      - name: repo
        type: git
  steps:
    - name: git-init-op
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        git fetch origin pull/$(params.pr_number)/head:workbranch
        git checkout workbranch

    - name: status-setup
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      env:
        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: auth-secret
              key: token
      script: |
        #!/usr/libexec/platform-python
        import json
        import yaml
        import os
        import http.client

        def post_status(description, context):
            with open("/workspace/pr/pr.json") as f:
                PR_INFO = json.load(f)
            status_url = "/repos/{}/statuses/{}".format(PR_INFO["Base"]["Repo"]["FullName"], PR_INFO["Head"]["Sha"])
            data = {
                "state": "pending",
                "target_url": "https://tekton-dashboard-openshift-pipelines.apps.ocp4.prod.psi.redhat.com/#/namespaces/aicoe-infra-prod/pipelineruns/$(params.pipelinerun_name)",
                "description": description,
                "context": context
            }

            conn = http.client.HTTPSConnection("api.github.com")
            r = conn.request(
                "POST",
                status_url,
                body=json.dumps(data),
                headers={
                    "User-Agent": "aicoe-ci",
                    "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
                })
            resp = conn.getresponse()
            if not str(resp.status).startswith("2"):
                print("Error: %d" % (resp.status))
                print(resp.read())
            else:
                print(resp.read())

        pytest,precommit,build,tox = True,True,True,True
        if os.path.isfile('.aicoe-ci.yaml'):
            with open(".aicoe-ci.yaml", "r") as stream:
                conf = yaml.safe_load(stream)

            pytest = True if "thoth-pytest" in conf.get("check") or "thoth-pytest-py38" in conf.get("check") else False
            precommit = True if "thoth-precommit" in conf.get("check") or "thoth-precommit-py38" in conf.get("check") else False
            build = True if "thoth-build" in conf.get("check") else False
            tox = True if "thoth-tox" in conf.get("check") else False

        if os.path.isfile('setup.py') and pytest:
            description="The pytest test pending."
            context="aicoe-ci/pytest-check"
            post_status(description, context)
        if os.path.isfile('.pre-commit-config.yaml') and precommit:
            description="The pre-commit test pending."
            context="aicoe-ci/pre-commit-check"
            post_status(description, context)
        if build:
            description="The image build test pending."
            context="aicoe-ci/build-check"
            post_status(description, context)
        if os.path.isfile('tox.ini') and tox:
            description="The pytest test pending."
            context="aicoe-ci/tox-check"
            post_status(description, context)
