apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pytest-check
  labels:
    app: thoth-ci
spec:
  params:
    - name: pr_number
      description: Pull Request number.
    - name: pipelinerun_name
      description: pipelinerun associated.
    - name: pytest_env
      description: pytest enviromental variables.
      default: ""
  resources:
    inputs:
      - name: s2i-thoth
        type: image
      - name: pr
        type: pullRequest
      - name: repo
        type: git

  steps:
    - name: git-init-op
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        git fetch origin pull/$(params.pr_number)/head:workbranch
        git checkout workbranch

    - name: check-pip-version
      image: quay.io/thoth-station/thoth-pytest:v0.10.2
      workingDir: /workspace/repo
      script: |
        pip3 --version

    - name: check-micropipenv
      image: quay.io/thoth-station/thoth-pytest:v0.10.2
      workingDir: /workspace/repo
      script: |
        micropipenv --version

    - name: run-pytest
      image: quay.io/thoth-station/thoth-pytest:v0.10.2
      resources:
        limits:
          memory: "500Mi"
          cpu: "1"
        requests:
          memory: "500Mi"
          cpu: "1"
      workingDir: /workspace/repo
      script: |
        if [[ -n "$(params.pytest_env)" ]]; then
          for v in $(echo -n $(params.pytest_env) | awk 'gsub(/\{|\}/ , "")' | tr "," "\n" | sed -e "0,/:/s//=/"); do
            eval export $v
          done
        fi
        if [[ -f setup.py ]]; then
          micropipenv install --dev
          set +e
          out=$(python3 setup.py test 2>&1)
          exit_code=$?
          set -e
          if [[ $exit_code -ne 0 ]]; then
            state="failure"
            desc="The pytest test failed!"
            cat <<EOF > /workspace/repo/pr-comment
        <details>
        <summary>Pytest Test failed! Click here</summary>

        \`\`\`
        $out
        \`\`\`
        </details>
        EOF
          else
            state="success"
            desc="The pytest test succeeded!"
          fi
          cat <<EOF > /workspace/repo/pr-status.json
          {
            "state": "$state",
            "desc": "$desc"
          }
        EOF
        fi

    - name: pr-updates
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      env:
        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: auth-secret
              key: token
      script: |
        #!/usr/libexec/platform-python
        import json
        import os
        import http.client

        def post_status(state, description):
            with open("/workspace/pr/pr.json") as f:
                PR_INFO = json.load(f)
            status_url = "/repos/{}/statuses/{}".format(PR_INFO["Base"]["Repo"]["FullName"], PR_INFO["Head"]["Sha"])
            data = {
                "state": state,
                "target_url": "http://tekton-dashboard-tekton-pipelines.apps.thoth01.lab.upshift.rdu2.redhat.com/#/namespaces/thoth-ci/pipelineruns/$(params.pipelinerun_name)",
                "description": description,
                "context": "thoth-ci/pytest-check"
            }

            conn = http.client.HTTPSConnection("api.github.com")
            r = conn.request(
                "POST",
                status_url,
                body=json.dumps(data),
                headers={
                    "User-Agent": "thoth-ci",
                    "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
                })
            resp = conn.getresponse()
            if not str(resp.status).startswith("2"):
                print("Error: %d" % (resp.status))
                print(resp.read())

        def post_comment(comment):
            with open("/workspace/pr/pr.json") as f:
                PR_INFO = json.load(f)
            comment_url = "/repos/{}/issues/{}/comments".format(PR_INFO["Base"]["Repo"]["FullName"], PR_INFO["Number"])

            data = {
                "body": comment,
            }
            conn = http.client.HTTPSConnection("api.github.com")
            r = conn.request(
                "POST",
                comment_url,
                body=json.dumps(data),
                headers={
                    "User-Agent": "thoth-ci",
                    "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
                })
            resp = conn.getresponse()
            if not str(resp.status).startswith("2"):
                print("Error: %d" % (resp.status))
                print(resp.read())

        if os.path.isfile('pr-status.json'):
          with open('pr-status.json') as json_data:
            status_state=json.load(json_data)
            post_status(status_state['state'], status_state['desc'])
        if os.path.isfile('pr-comment'):
          with open('pr-comment') as comment_data:
              comment = comment_data.read()
              post_comment(comment)
