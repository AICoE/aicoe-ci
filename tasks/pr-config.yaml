apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pr-config
  labels:
    app: aicoe-ci
spec:
  params:
    - name: pr_number
      description: Pull Request number.
    - name: overlay_name
      description: The name of the single overlay to deploy if there was a /deploy <overlay name> comment.
      default: ""
  resources:
    inputs:
      - name: repo
        type: git
      - name: s2i-thoth
        type: image
  results:
    - name: base-image
    - name: build-stratergy
    - name: dockerfile-path
    - name: build-source-script
    - name: registry
    - name: registry-org
    - name: registry-project
    - name: registry-secret
    - name: registry-org
    - name: registry-project
    - name: pytest-env
    - name: deploy-project-org
    - name: deploy-project-name
    - name: deploy-image-name
    - name: overlay-contextpath
  steps:
    - name: git-init-op
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        git fetch origin pull/$(params.pr_number)/head:workbranch
        git checkout workbranch

    - name: gather-info
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      securityContext:
        privileged: true
      script: |
        if [[ ! -f .aicoe-ci.yaml ]]; then
          cat <<EOF > .aicoe-ci.yaml
          check: []
          release:
            - upload-pypi-sesheta
          build:
            base-image: "quay.io/thoth-station/s2i-thoth-ubi8-py36:latest"
            build-stratergy: ""
            dockerfile-path: ""
            build-source-script: ""
            registry: "quay.io"
            registry-org: "thoth-station"
            registry-project: ""
            registry-secret: "thoth-station-thoth-pusher-secret"
          deploy:
            project-org: "thoth-station"
            project-name: "thoth-application"
            image-name: ""
            overlay-contextpath: ""
        EOF
        fi
        echo -n "" > $(results.base-image.path)
        echo -n "" > $(results.build-stratergy.path)
        echo -n "" > $(results.dockerfile-path.path)
        echo -n "" > $(results.build-source-script.path)
        echo -n "" > $(results.registry.path)
        echo -n "" > $(results.registry-org.path)
        echo -n "" > $(results.registry-project.path)
        echo -n "" > $(results.registry-secret.path)
        echo -n "" > $(results.pytest-env.path)
        echo -n "" > $(results.deploy-project-org.path)
        echo -n "" > $(results.deploy-project-name.path)
        echo -n "" > $(results.deploy-image-name.path)
        echo -n "" > $(results.overlay-contextpath.path)

    - name: query-config
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      script: |
        #!/usr/bin/env python3
        import os
        import json
        import yaml

        def write_to_file(path, item, content):
            output = open(path, "w+")
            output.write(str(item.get(content)))
            output.close()

        with open(".aicoe-ci.yaml", "r") as stream:
            conf = yaml.safe_load(stream)

        if conf.get("pytest-env"):
            output = open("/tekton/results/pytest-env", "w+")
            json.dump(conf.get("pytest-env"), output)
            output.close()
        for r in conf.get("package-upload", []):
            if "pulp" == r["instance"]:
                for ele in r:
                    write_to_file(f"/tekton/results/{ele}", r, ele)
        if conf.get("overlays"):
            for overlay in conf.get("overlays", []):
                overlay_name = overlay.get("name")
                comment_overlay = "$(params.overlay_name)"
                if comment_overlay == overlay_name:
                    for ele in overlay.get("build", []):
                        if isinstance(overlay["build"].get(ele), str):
                            if ele == "build-strategy":
                                output = open(f"/tekton/results/build-stratergy", "w+")
                            else:
                                output = open(f"/tekton/results/{ele}", "w+")
                            if ele == "registry-secret" and not overlay["build"].get(ele):
                                output.write("thoth-station-thoth-pusher-secret")
                            else:
                                output.write(overlay["build"].get(ele))
                            output.close()
                    for ele in overlay.get("deploy", {}):
                        if ele == "overlay-contextpath":
                            write_to_file(f"/tekton/results/{ele}", overlay["deploy"], ele)
                        else:
                            output = open(f"/tekton/results/deploy-{ele}", "w+")
                            if ele == "project-name" and not overlay["deploy"].get(ele):
                                output.write("thoth-application")
                            elif ele == "project-org" and not overlay["deploy"].get(ele):
                                output.write("thoth-station")
                            else:
                                output.write(overlay["deploy"].get(ele))
                            output.close()
                    break
        for ele in conf.get("build", []):
            if isinstance(conf["build"].get(ele), str):
                if ele == "build-strategy":
                    output = open(f"/tekton/results/build-stratergy", "w+")
                else:
                    output = open(f"/tekton/results/{ele}", "w+")
                if ele == "registry-secret" and not conf["build"].get(ele):
                    output.write("thoth-station-thoth-pusher-secret")
                else:
                    output.write(conf["build"].get(ele))
                output.close()
            elif isinstance(conf["build"].get(ele), dict):
                output = open(f"/tekton/results/{ele}", "w+")
                json.dump(conf["build"].get(ele), output)
                output.close()
        for ele in conf.get("deploy", {}):
            if ele == "overlay-contextpath":
                write_to_file(f"/tekton/results/{ele}", conf["deploy"], ele)
            else:
                output = open(f"/tekton/results/deploy-{ele}", "w+")
                if ele == "project-name" and not conf["deploy"].get(ele):
                    output.write("thoth-application")
                elif ele == "project-org" and not conf["deploy"].get(ele):
                    output.write("thoth-station")
                else:
                    output.write(conf["deploy"].get(ele))
                output.close()
        for ele in conf.get("sibling", {}):
            write_to_file(f"/tekton/results/{ele}", conf["sibling"], ele)
        print("done")

    - name: check-results
      image: $(resources.inputs.s2i-thoth.url)
      workingDir: /workspace/repo
      script: |
        ls -la /tekton/results/
